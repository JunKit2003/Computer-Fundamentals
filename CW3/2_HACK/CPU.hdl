// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Central Processing unit (CPU).
 * Consists of an ALU and a set of registers, designed to fetch and 
 * execute instructions written in the Hack machine language.
 * In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM=0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time unit. If reset=1 then the 
 * CPU jumps to address 0 (i.e. sets pc=0 in next time unit) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).

    OUT outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Implement the CPU based on its following functionalities


    // Instruction decode
    And(a=instruction[15], b=instruction[5], out=seltosaveinregA);//(C instruction and d1=1)
    Not(in=instruction[15], out=nin15);//(out has to be 1 to load if A instruction) 
    Or(a=nin15, b=seltosaveinregA, out=toloadregA);//(load if any of above is 1)
	                                              //instruction[15](A or C instruction)
   									  //A register loaded if A instruction or (C instruction and d1=1)
    



    // A register and input mux
    Mux16(a=instruction,b=ALUoutput,sel=seltosaveinregA,out=toregA);//to choose load to A register
    ARegister(in=toregA,load=toloadregA,out[0..14]=addressM,out=topc,out=ychoose1toALU);
    

    
    // D register
    And(a=instruction[15],b=instruction[4],out=seltoregD);//both ins[5] and ins[4] has to be 1 to load D register
    DRegister(in=ALUoutput, load=seltoregD, out=xtoALU);//output is x input to ALU
    And(a=instruction[15],b=instruction[3],out=writeM);

    // ALU and input mux
    Mux16(a=ychoose1toALU,b=inM,sel=instruction[12],out=ytoALU);//choose y input to ALU
    ALU(x=xtoALU,y=ytoALU,zx=instruction[11],nx=instruction[10],zy=instruction[9],ny=instruction[8],f=instruction[7],no=instruction[6],ng=ng,zr=zr,out=ALUoutput,out=outM);
 

    // PC with jump test
    Or(a=ng, b=zr, out=a);
    Not(in=a, out=b);
    And(a=instruction[0], b=b, out=JGT);
    And(a=instruction[2], b=ng, out=JLT);
    And(a=instruction[1], b=zr, out=JEQ);
    Or(a=JEQ, b=JLT, out=JLE);
    Or(a=JGT, b=JLE, out=xyz);
    And(a=xyz, b=instruction[15], out=jump);
    PC(in=topc,reset=reset,inc=true,load=jump,out[0..14]=pc);//pc loaded if jump instruction decided by ALU output 
											//inc true always to go to next instruction
											//jump depends on ALU output equal to, less than, or equal to 0(reason for zr and ng involvement)    

   
}
